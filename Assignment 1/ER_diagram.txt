/* === Package, Employee, Customer, Facility Tables === */
[Employees](employeeID*, name, gender, dateOfBirth, title, salary);
[Customers](customerID*, name, gender, phoneNumber);
[Facilities](facilityID*, address, postalCode);
[[Packages]](packageID*, weight, 
    dimensions(height, width, depth),
    contentDescription,
    estimatedValue); 

/* === Delivery Request Tables === */
[DeliveryRequests](requestID*, 
    pickupAddress, 
    pickupPostalCode, 
    recipientName, 
    recipientAddress, 
    recipientPostalCode);
[AcceptableRequests](deliveryPrice,
    tentativePickupDate,
    estimatedDaysToDelivery); /*ISA delivery req*/
[AcceptedRequests](requestStatus, 
    paymentCost,
    creditCardNumber, 
    paymentTimestamp); /*ISA acceptable req, after payment is made*/
[WithdrawnRequests](); /*ISA acceptable req*/

/* === Delivery Process Tables === */
[[Legs]](startingTimestamp, endingTimestamp);
[[FirstLegs]]();
[[IntermediateLegs]]();
[[UnsuccessfulLegs]](reasonOfFailure); 
[[FinalLegs]]();
<Handles>(); /* Employee handles a leg */
<Precedes>(); /*a leg precedes another leg*/


/* === Relationship/Aggregation Tables === */
[[UnsuccessfulPickups]](timestamp, reason);
<Attempts>();
<Processes>(); /* Employee processes a DR. NOTE: Different from handling! */
<Monitors>(); /*Employee monitors a Delivery Process */
<Makes>(); /* Customer makes a DR */
<<Carries>>(); /* DR carries packages */
<<Records>>(); /* Record unsuccessful pickups */
<CustToFac>();
<FacToFac>();
<FacToCust>();
<<Consists>>();
<MeasuresPackage>(weight, dimensions(height, width, depth));



/* === Mapping Relationships === */
/* Each DR is made by exactly 1 Customer
*  Customer makes 1 or more DR
*/
DeliveryRequests ==> Makes;
Customers --- Makes;

/* DR consists of one or more Packages
Each Package is consisted by only one DR
*/
DeliveryRequests === Carries;
Packages ==> Carries;

/* DR must be processed by at least 1 Employee 
Each Employee can handle 0 or more DR
*/
Employees --- Processes;
DeliveryRequests ==> Processes; 


/* Assume we do not record unsuccessful pickups. Then
an AcceptedRequest can have 0 or more unsuccesful pickups, but
an unsuccessful pickup has only one AcceptedRequest*/
AcceptedRequests --- Records;
UnsuccessfulPickups  ==> Records;

/* An unsuccesful pickup is always done so by an Employee, and an Employee can
only attempt each unsuccesful pickup */
UnsuccessfulPickups ==> Attempts;
Employees --- Attempts;

/* Maps src and dest of legs */
Legs --- Precedes [prev];
Legs --- Precedes [next];

/* Employee monitors 0 or more AcceptedRequests
AcceptedRequests monitored by only one Employee
*/
Employees --- Monitors; 
AcceptedRequests ==> Monitors;

/* AcceptableRequests consists of 2 or more legs
Legs matched to only one AcceptableRequests
*/
AcceptedRequests === Consists;
Legs ==> Consists;

/* Employee 0 or more legs?
Leg handled by only one Employee */
Employees --> Handles;
Legs ==> Handles;

/* FirstLegs measures one or more packages
Package measured by up to one FirstLeg*/
FirstLegs === MeasuresPackage;
Packages --> MeasuresPackage;

/* FirstLegs, IntermediateLegs, UnsuccessfulLegs, FinalLegs */
FirstLegs ==> CustToFac;
IntermediateLegs ==> FacToFac;
UnsuccessfulLegs ==> FacToFac;
FinalLegs ==> FacToCust;

/* Leg delivers to one Facility
One facility can have many Legs delivered to
*/
Facilities --- CustToFac;
Facilities --- FacToCust;
Facilities --- FacToFac [src];
Facilities --- FacToFac [dest];


/* ===== ISA Relationships ===== */
DeliveryRequests --> {AcceptableRequests};
AcceptableRequests --> {AcceptedRequests, WithdrawnRequests};
Legs ==> {FirstLegs, IntermediateLegs, UnsuccessfulLegs, FinalLegs};

